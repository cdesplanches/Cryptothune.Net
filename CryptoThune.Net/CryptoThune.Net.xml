<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CryptoThune.Net</name>
    </assembly>
    <members>
        <member name="T:Cryptothune.Lib.BotThune`1">
            <summary>
            The Bot class that apply strategy on a given crypto market exchange place
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cryptothune.Lib.BotThune`1.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Cryptothune.Lib.BotThune`1.MarketExchange">
            <summary>
            return the market exchange place object
            </summary>
            <value>the market exchange place</value>
        </member>
        <member name="M:Cryptothune.Lib.BotThune`1.AddStrategy(Cryptothune.Lib.IStrategy,System.String,System.Double)">
            <summary>
            Add a trading strategy to a specified symbol.
            </summary>
            <param name="strategy">the strategy to apply on the selected symbol. <see cref="T:Cryptothune.Lib.IStrategy"/> </param>
            <param name="symbol">Symbol ex: "XRPEUR" </param>
            <param name="percent">Percentage of the portfolio to allocate to this strategy</param>
        </member>
        <member name="M:Cryptothune.Lib.BotThune`1.Sim(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Launch a simulation of trades on the current exchange.
            It will:
                1. Create or update the complete trading history on all symbols that strategies are responsible of
                2. Execute the strategy of Buy/Sell, starting from the beginnig of the symbol history life
                3. Export a picture of the Buy/Sell history (graph)
                4. Export a picture of the evolution of the fiat balance.
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.BotThune`1.Run">
            <summary>
            Perform a real run
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.BotThune`1.DryRun">
            <summary>
            Perform a dry run
            </summary>
        </member>
        <member name="T:Cryptothune.Lib.AssetSymbol">
            <summary>
            Define what is a symbol
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.AssetSymbol.#ctor(System.String,System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="symbolName"></param>
            <param name="baseName"></param>
            <param name="quoteName"></param>
        </member>
        <member name="P:Cryptothune.Lib.AssetSymbol.QuoteName">
            <summary>
            The Quote name of a symbol (ex: ZEUR)
            </summary>
            <value></value>
        </member>
        <member name="P:Cryptothune.Lib.AssetSymbol.BaseName">
            <summary>
            The base name of the symbol (ex: XBT)
            </summary>
            <value></value>
        </member>
        <member name="P:Cryptothune.Lib.AssetSymbol.SymbolName">
            <summary>
            The complete symbol name. (ex: XXBTEUR)
            </summary>
            <value></value>
        </member>
        <member name="P:Cryptothune.Lib.AssetSymbol.OrderMin">
            <summary>
            The minimum order authorized for this asset
            </summary>
            <value></value>
        </member>
        <member name="T:Cryptothune.Lib.ExchangeFake">
            <summary>
            A 'fake' exchqnge market, built on top of the kraken public exchange market.
            </summary>
        </member>
        <member name="P:Cryptothune.Lib.ExchangeFake._money">
            <summary>
            The current amount of money on the 'fake' portfolio
            </summary>
            <value></value>
        </member>
        <member name="F:Cryptothune.Lib.ExchangeFake._fakeDB">
            <summary>
            Internal Database
            </summary>
        </member>
        <member name="F:Cryptothune.Lib.ExchangeFake._priceHistory">
            <summary>
            Store the market price history
            </summary>
        </member>
        <member name="F:Cryptothune.Lib.ExchangeFake._tradeHistory">
            <summary>
            the list of trades.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Cryptothune.Lib.ExchangeFake._assetPortfolio">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.Balances(System.Nullable{System.DateTime})">
            <summary>
            Get the total balances of the virtual portfolio
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.Balance(System.String)">
            <summary>
            Get the current available balance (from the DB)
            </summary>
            <param name="asset"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.Deposit(System.Double)">
            <summary>
            Fake a deposit order (update the entry on the sqlite DB)
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.Name">
            <summary>
            The name of this Fake market exchange
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.NormalizeSymbolName(System.String)">
            <summary>
            Return the normalized name for a given symbol
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.PricesHistory(Cryptothune.Lib.AssetSymbol)">
            <summary>
            Get the prices history for a given asset
            </summary>
            <param name="assetName">The nqme of the asset to get the price history</param>
            <returns>list of prices</returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.ExportTradesOnDB(Cryptothune.Lib.AssetSymbol)">
            <summary>
            Get the price history for a given asset and store it into a sqlite DB.
            </summary>
            <param name="assetName"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.PreventRateLimit">
            <summary>
            Override of the PreventRateLimit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.LatestTrade(Cryptothune.Lib.AssetSymbol)">
            <summary>
            Get the latest transaction performed for a given asset
            </summary>
            <param name="assetName"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.Buy(Cryptothune.Lib.AssetSymbol,System.Double,System.Double,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Place a 'fake' buy order
            </summary>
            <param name="assetName"></param>
            <param name="price"></param>
            <param name="ratio"></param>
            <param name="dt"></param>
            <param name="dry"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.Sell(Cryptothune.Lib.AssetSymbol,System.Double,System.Double,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Place a 'fake' sell order
            </summary>
            <param name="assetName"></param>
            <param name="marketPrice"></param>
            <param name="ratio"></param>
            <param name="dt"></param>
            <param name="dry"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeFake.PlaceOrder(Cryptothune.Lib.AssetSymbol,Cryptothune.Lib.Trade.TOrderType,System.DateTime,System.Double,System.Double)">
            <summary>
            Place a 'fake' order on the 'fake' exchange market
            </summary>
            <param name="assetName"></param>
            <param name="orderType"></param>
            <param name="dt"></param>
            <param name="price"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="T:Cryptothune.Lib.ExchangeKraken">
            <summary>
            Kraken market object
            </summary>
        </member>
        <member name="F:Cryptothune.Lib.ExchangeKraken.kc">
            <summary>
            The internal Kraken client (from Kraken.net)
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Cryptothune.Lib.ExchangeKraken.RateLimiterPenality">
            <summary>
            The rate limiter penality (in ms)
            </summary>
            <value>The value in ms of the penality of rate limiter </value>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.PreventRateLimit">
            <summary>
            Stop the execution on the process in order to respect the rate limiter.
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.ResetRateLimitCounter">
            <summary>
            Reset the rate limit counter
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.Balances(System.Nullable{System.DateTime})">
            <summary>
            Get the current balance of all assets
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.Balance(System.String)">
            <summary>
            Get the fiat balance (for a given currency)
            </summary>
            <param name="asset">the fiat currency (ex: ZEUR, or ZUSD)</param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.MarketPrice(Cryptothune.Lib.AssetSymbol)">
            <summary>
            The current price for a given asset
            </summary>
            <param name="assetName"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.TradesHistory(Cryptothune.Lib.AssetSymbol,System.DateTime)">
            <summary>
            The recent trades history for a given symbol
            </summary>
            <param name="assetName"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.NormalizeSymbolName(System.String)">
            <summary>
            Normalize a given symbol name, like "XRPEUR" to the equivalent for Kraken Symbol.
            </summary>
            <param name="symbol">The symbol name (ex: "XRPEUR")</param>
            <returns>A generic Asset name object. </returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.PricesHistory(Cryptothune.Lib.AssetSymbol)">
            <summary>
            Return the prices history for a given asset
            </summary>
            <param name="assetName">An normalized asset built from a normalized symbol name.</param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.LatestTrade(Cryptothune.Lib.AssetSymbol)">
            <summary>
            Get the latest trades done for a given asset name
            </summary>
            <param name="assetName">The asset name to retreive the trade history on.</param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.Buy(Cryptothune.Lib.AssetSymbol,System.Double,System.Double,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Place a "Buy" order on the Kraken exchange market.
            </summary>
            <param name="assetName"></param>
            <param name="price"></param>
            <param name="ratio"></param>
            <param name="dt"></param>
            <param name="dry"></param>
            <returns>true if the order is properly placed, false otherwise.</returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.Sell(Cryptothune.Lib.AssetSymbol,System.Double,System.Double,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Place a "Sell" order on the Kraken exchange market.
            </summary>
            <param name="assetName">The crypto asset to sell for a given currency. ex: "BTCEUR" ></param>
            <param name="price">The wanted price (on the currency).</param>
            <param name="ratio">the pourcentage to qpply on the transaction.</param>
            <param name="dt">When schedule that order.</param>
            <param name="dry">Is it for real or not?</param>
            <returns>true if the order was properly placed, false otherwise.</returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.Name">
            <summary>
            The name of the exchqnge market
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.ExchangeKraken.Fees(System.Double,Cryptothune.Lib.Trade.TOrderType)">
            <summary>
            Return the fees for q Buy or Sell transaction.
            </summary>
            <param name="whole">The value to apply the fee on</param>
            <param name="oType">Buy or Sell order.</param>
            <returns></returns>
        </member>
        <member name="T:Cryptothune.Lib.IExchange">
            <summary>
            Interface for an exchange market
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.NormalizeSymbolName(System.String)">
            <summary>
            Normalize a symbol asset
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.Fees(System.Double,Cryptothune.Lib.Trade.TOrderType)">
            <summary>
            Fees for a transaction
            </summary>
            <param name="whole"></param>
            <param name="oType"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.Balances(System.Nullable{System.DateTime})">
            <summary>
            The complete balances
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.Balance(System.String)">
            <summary>
            The balance for a given asset
            </summary>
            <param name="asset"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.PricesHistory(Cryptothune.Lib.AssetSymbol)">
            <summary>
            The price history
            </summary>
            <param name="assetName"></param>
            <returns></returns>        
        </member>
        <member name="M:Cryptothune.Lib.IExchange.MarketPrice(Cryptothune.Lib.AssetSymbol)">
            <summary>
            the current market price of a given asset
            </summary>
            <param name="assetName"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.LatestTrade(Cryptothune.Lib.AssetSymbol)">
            <summary>
            The last tarde transaction
            </summary>
            <param name="assetName"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.Buy(Cryptothune.Lib.AssetSymbol,System.Double,System.Double,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Place a buy order
            </summary>
            <param name="assetName"></param>
            <param name="price"></param>
            <param name="qty"></param>
            <param name="dt"></param>
            <param name="dry"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.Sell(Cryptothune.Lib.AssetSymbol,System.Double,System.Double,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Place a sell order
            </summary>
            <param name="assetName"></param>
            <param name="price"></param>
            <param name="qty"></param>
            <param name="dt"></param>
            <param name="dry"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.PreventRateLimit">
            <summary>
            Pause the execution according to the current rate limiter counter.
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.IExchange.ResetRateLimitCounter">
            <summary>
            Reset the rate limit counter
            </summary>
        </member>
        <member name="T:Cryptothune.Lib.Trade">
            <summary>
            A trade object
            </summary>
        </member>
        <member name="T:Cryptothune.Lib.Trade.TOrderType">
            <summary>
            Buy, or Sell
            </summary>
        </member>
        <member name="F:Cryptothune.Lib.Trade.TOrderType.Buy">
            <summary>
            A Buy trade
            </summary>
        </member>
        <member name="F:Cryptothune.Lib.Trade.TOrderType.Sell">
            <summary>
            A Sell trade
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.Trade.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Cryptothune.Lib.Trade.Timestamp">
            <summary>
            The date time when the trade occur
            </summary>
            <value></value>
        </member>
        <member name="P:Cryptothune.Lib.Trade.Quantity">
            <summary>
            the quantity of asset trade.
            </summary>
            <value></value>
        </member>
        <member name="P:Cryptothune.Lib.Trade.Asset">
            <summary>
            The trade asset
            </summary>
            <value></value>
        </member>
        <member name="P:Cryptothune.Lib.Trade.RefPrice">
            <summary>
            The reference price
            </summary>
            <value></value>
        </member>
        <member name="P:Cryptothune.Lib.Trade.OrderType">
            <summary>
            Buy or Sell?
            </summary>
            <value></value>
        </member>
        <member name="T:Cryptothune.Lib.RetryHelper`1">
            <summary>
            Helper class about retries on case of errors
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cryptothune.Lib.RetryHelper`1.RetryOnException(System.Int32,System.TimeSpan,System.Action)">
            <summary>
            Retry on exception
            </summary>
            <param name="times">Nb of retry</param>
            <param name="delay">Delay betzeen 2 retry</param>
            <param name="operation">A void func to call if success.</param>
        </member>
        <member name="M:Cryptothune.Lib.RetryHelper`1.RetryOnException(System.Int32,System.TimeSpan,System.Func{CryptoExchange.Net.Objects.WebCallResult{`0}})">
            <summary>
            Retry on error
            </summary>
            <param name="times">Nb retry</param>
            <param name="delay">delay to wait between 2 retries</param>
            <param name="operation">the function to call.</param>
            <returns></returns>
        </member>
        <member name="T:Cryptothune.Lib.Funiol">
            <summary>
            Funiol, the strangest trader ever.
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.Funiol.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            ctor
            </summary>
            <param name="threshold">Threshold to trig the decision</param>
            <param name="ruptor">% to force a decision</param>
            <param name="proba">The probability to take a decision</param>
        </member>
        <member name="M:Cryptothune.Lib.Funiol.Name">
            <summary>
            The name of this algo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.Funiol.Percentage(System.Double,System.Double)">
            <summary>
            Help function that compute percentage
            </summary>
            <param name="part"></param>
            <param name="whole"></param>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.Funiol.Decide(System.Double,System.Double,Cryptothune.Lib.Trade.TOrderType)">
            <summary>
            The 'brain' that decide if yes or no it must do an action.
            </summary>
            <param name="curPrice"></param>
            <param name="refPrice"></param>
            <param name="prevAction"></param>
            <returns></returns>
        </member>
        <member name="T:Cryptothune.Lib.IStrategy">
            <summary>
            Strategy interface
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.IStrategy.Name">
            <summary>
            The name of this strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cryptothune.Lib.IStrategy.Decide(System.Double,System.Double,Cryptothune.Lib.Trade.TOrderType)">
            <summary>
            The algo to implement
            </summary>
            <param name="curPrice"></param>
            <param name="refPrice"></param>
            <param name="prevAction"></param>
            <returns></returns>
        </member>
        <member name="T:Cryptothune.Lib.StrategyObject">
            <summary>
            Object that contains a strategy linked to a given asset.
            </summary>
        </member>
        <member name="M:Cryptothune.Lib.StrategyObject.#ctor(Cryptothune.Lib.IStrategy,Cryptothune.Lib.AssetSymbol,System.Double)">
            <summary>
            ctor
            </summary>
            <param name="strategy"></param>
            <param name="assetName"></param>
            <param name="percent"></param>
        </member>
        <member name="P:Cryptothune.Lib.StrategyObject.Strategy">
            <summary>
            the strategy linkedto that object
            </summary>
            <value></value>
        </member>
        <member name="P:Cryptothune.Lib.StrategyObject.AssetName">
            <summary>
            The asset
            </summary>
            <value></value>
        </member>
        <member name="P:Cryptothune.Lib.StrategyObject.Percentage">
            <summary>
            The percentage of total money to apply on the asset for the given strategy.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
